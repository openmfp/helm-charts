name: Test local setup
on:
  pull_request:
    branches:
      - '**'

concurrency:
  group: localsetup-${{ github.ref }}
  cancel-in-progress: false

jobs:
  kind-localsetup:
    runs-on: ubuntu-latest-large

    steps:
    # Step 1: Checkout the code
    - uses: actions/checkout@v4

    #  # Step 2: Install KIND
    # - name: Install KIND
    #   run: |
    #       # For AMD64 / x86_64
    #       [ $(uname -m) = x86_64 ] && curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.26.0/kind-linux-amd64
    #       # For ARM64
    #       [ $(uname -m) = aarch64 ] && curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.26.0/kind-linux-arm64
    #       chmod +x ./kind
    #       sudo mv ./kind /usr/local/bin/kind

    #   # Step 3: Verify KIND installation
    # - name: Verify KIND installation
    #   run: kind version
    
    # - name: Install HELM
    #   run: |
    #     curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
    #     chmod 700 get_helm.sh
    #     ./get_helm.sh

    # Step 4: Install github cli
    - name: Install the gh cli
      uses: ksivamuthu/actions-setup-gh-cli@v3
      with:
        version: 2.24.3
    - run: |
        gh version

    # Step 5: generate GH_TOKEN with permissions to pull private images
    - name: Generate a token
      id: generate-token
      uses: actions/create-github-app-token@v1
      with:
        app-id: "838464"
        private-key: ${{ secrets.OPENMFP_PUBLISHER_PRIVATE_KEY }}
        owner: ${{ github.repository_owner }}
        skip-token-revoke: true
        repositories: |
          portal
          helm-charts
          helm-charts-priv
          example-content
          extension-manager-operator

    # - uses: peter-evans/create-or-update-comment@v3
    #   with:
    #     issue-number: 181
    #     body: "GH Token created"
    #     reactions: '+1'

    # # Debug step: test docker pull
    # - name: Test docker pull
    #   # GH_TOKEN: ${{ steps.generate-token.outputs.token }}
    #   # GH_USER: ${{ github.repository_owner }}
    #   run: |
    #     docker login ghcr.io -u ${{ github.repository_owner }} -p ${{ steps.generate-token.outputs.token }}
    #     docker pull ghcr.io/openmfp/portal:0.287.0

    # # Step 6: Run start.sh
    # - name: Run start.sh
    #   id: run_start_sh
    #   env:
    #     GH_TOKEN: ${{ steps.generate-token.outputs.token }}
    #     GH_USER: ${{ github.repository_owner }}
    #     DEBUG: true
    #   run: |
    #     chmod +x ./local-setup/scripts/start.sh
    #     ./local-setup/scripts/start.sh
    #   continue-on-error: true

    # Debug token with docker
    - name: Debug token with docker
      run: |
        set -x
        echo ${{ steps.generate-token.outputs.token }} > token.txt

        curl -H "Authorization: Bearer ${{ steps.generate-token.outputs.token }}" https://api.github.com/user

        cat token.txt
        
        docker login ghcr.io -u ${{ github.repository_owner }} -p ${{ steps.generate-token.outputs.token }}
        docker pull ghcr.io/openmfp/portal:0.287.0


    # # debug step 6
    # - name: Debug6
    #   if: steps.run_start_sh.outcome == 'failure'
    #   run: |
    #     set -x
    #     docker ps
    #     curl -s -i http://localhost:8000/ || true

    #     kubectl get pods -A -o wide
    #     kubectl get svc -A
    #     kubectl get helmreleases -A
    #     kubectl get deployments -A
    #     kubectl get secrets -A
    #     kubectl get crds -A
    #     kubectl get nodes -o wide

    #     echo "Describe all pods which are not Running"
    #     kubectl get pods -A --field-selector=status.phase!=Running -o jsonpath='{range .items[*]}{.metadata.namespace} {.metadata.name}{"\n"}{end}' | while read namespace name; do kubectl describe pod $name -n $namespace; done

    #     echo "Describe all helmreleases which are not Ready yet"
    #     kubectl get helmreleases -A -o json | jq -r '.items[] | select(.status.conditions[]? | select(.type == "Ready" and .status != "True")) | "\(.metadata.namespace) \(.metadata.name)"' | while read namespace name; do kubectl describe helmrelease $name -n $namespace; done

    #     echo "Print imagePullSecret"
    #     kubectl get secret ghcr-credentials -n openmfp-system -o yaml

    #     echo "Test docker login and pull"
    #     docker login ghcr.io -u ${{ github.repository_owner }} -p ${{ steps.generate-token.outputs.token }}
    #     docker pull ghcr.io/openmfp/portal:0.287.0


    # # Step 7: Prepare the NodeJS/playwright environment
    # - name: Cache node modules
    #   uses: actions/cache@v3
    #   with:
    #     path: ~/node_modules
    #     key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
    #     restore-keys: |
    #       ${{ runner.os }}-node-

    # # Step 8: Install NodeJS and dependencies
    # - name: Node ${{ matrix.node-version }}
    #   uses: actions/setup-node@v3
    #   with:
    #     node-version: ${{ matrix.node-version }}
    #     cache: 'npm'
    #     cache-dependency-path: 'local-setup/e2e'

    # # Step 9: Install npm dependencies
    # - name: Clean install of npm dependencies
    #   run: |
    #     cd local-setup/e2e
    #     npm install
    #     npm ci
    #     npx playwright install 

    # # Step 10: Run the end-to-end tests
    # - name: End2End tests
    #   run: |
    #     sleep 10

    #     kubectl get pods -A
    #     kubectl get svc -A

    #     # debug commands
    #     docker ps
    #     echo "Waiting for the service to be ready..."
    #     for i in {1..30}; do
    #       curl -s http://localhost:8000/ > /dev/null || true
    #       if [ $? -eq 0 ]; then
    #         echo "Service is ready."
    #         sleep 50
    #         break
    #       fi
    #       echo "Service not ready, retrying in 2 seconds..."
    #       sleep 2
    #     done

    #     curl -s -i http://localhost:8000/ || true

    #     echo "Running sample test"
    #     node local-setup/e2e/test-example.js
    #     echo "Running e2e tests"
    #     node local-setup/e2e/test-register-and-navigate.js
